2025-08-27T09:57:32.196400Z  INFO cmd: GreptimeDB version: 
branch: 
commit: 83f566ad20484549b7f550b79c0c71f1875ba663
clean: true
version: 0.16.0
2025-08-27T09:57:32.196404Z  INFO cmd: command line arguments
2025-08-27T09:57:32.196406Z  INFO cmd: argument: ./greptime
2025-08-27T09:57:32.196407Z  INFO cmd: argument: metasrv
2025-08-27T09:57:32.196407Z  INFO cmd: argument: start
2025-08-27T09:57:32.196408Z  INFO cmd: argument: --config-file
2025-08-27T09:57:32.196410Z  INFO cmd: argument: examples/metasrv-etcd.toml
2025-08-27T09:57:32.196836Z  WARN cmd: Failed to activate heap profile err=0: Internal error
1: Memory profiling is not enabled
2025-08-27T09:57:32.196917Z  INFO cmd::metasrv: Metasrv start command: StartCommand {
    rpc_bind_addr: None,
    rpc_server_addr: None,
    store_addrs: None,
    config_file: Some(
        "examples/metasrv-etcd.toml",
    ),
    selector: None,
    use_memory_store: None,
    enable_region_failover: None,
    http_addr: None,
    http_timeout: None,
    env_prefix: "GREPTIMEDB_METASRV",
    data_home: None,
    store_key_prefix: "",
    max_txn_ops: None,
    backend: None,
}
2025-08-27T09:57:32.197012Z  INFO servers::grpc: Using detected: 10.152.100.81:3002 as server address
2025-08-27T09:57:32.197294Z  INFO cmd::metasrv: Metasrv options: MetasrvOptions {
    store_addrs: [
        "127.0.0.1:2379",
    ],
    backend_tls: None,
    selector: RoundRobin,
    use_memory_store: false,
    enable_region_failover: false,
    allow_region_failover_on_local_wal: false,
    grpc: GrpcOptions {
        bind_addr: "127.0.0.1:3002",
        server_addr: "10.152.100.81:3002",
        max_recv_message_size: 512.0MiB,
        max_send_message_size: 512.0MiB,
        flight_compression: ArrowIpc,
        runtime_size: 8,
        tls: TlsOption {
            mode: Disable,
            cert_path: "",
            key_path: "",
            ca_cert_path: "",
            watch: false,
        },
    },
    http: HttpOptions {
        addr: "127.0.0.1:4000",
        timeout: 0ns,
        disable_dashboard: true,
        body_limit: 64.0MiB,
        prom_validation_mode: Strict,
        cors_allowed_origins: [],
        enable_cors: true,
    },
    logging: LoggingOptions {
        dir: "./greptimedb_data/logs",
        level: None,
        log_format: Text,
        max_log_files: 720,
        append_stdout: true,
        enable_otlp_tracing: false,
        otlp_endpoint: None,
        tracing_sample_ratio: None,
        otlp_export_protocol: None,
    },
    procedure: ProcedureConfig {
        max_retry_times: 12,
        retry_delay: 500ms,
        max_metadata_value_size: Some(
            1.5MiB,
        ),
        max_running_procedures: 128,
    },
    failure_detector: PhiAccrualFailureDetectorOptions {
        threshold: 8.0,
        min_std_deviation: 100ms,
        acceptable_heartbeat_pause: 10s,
        first_heartbeat_estimate: 1s,
    },
    datanode: DatanodeClientOptions {
        client: ClientOptions {
            timeout: 10s,
            connect_timeout: 1s,
            tcp_nodelay: true,
        },
    },
    enable_telemetry: true,
    data_home: "./greptimedb_data",
    wal: RaftEngine,
    export_metrics: ExportMetricsOption {
        enable: false,
        write_interval: 30s,
        self_import: None,
        remote_write: None,
    },
    store_key_prefix: "",
    max_txn_ops: 128,
    flush_stats_factor: 3,
    tracing: TracingOptions,
    backend: EtcdStore,
    meta_table_name: "greptime_metakv",
    meta_election_lock_id: 1,
    node_max_idle_time: 86400s,
}
2025-08-27T09:57:32.197743Z  INFO common_meta::kv_backend::etcd: Connected to etcd
2025-08-27T09:57:32.197952Z  INFO meta_srv::bootstrap: Using selector from options, selector type: RoundRobin
2025-08-27T09:57:32.198143Z  INFO common_event_recorder::recorder: Creating event recorder with options: EventRecorderOptions { ttl: "30d" }
2025-08-27T09:57:32.198294Z  INFO common_event_recorder::recorder: Start the background processor in event recorder to handle the received events.
2025-08-27T09:57:32.198458Z  INFO common_procedure::store: The procedure state store path is: procedure/
2025-08-27T09:57:32.392457Z  INFO cmd: Starting app: greptime-metasrv
2025-08-27T09:57:32.392495Z  INFO meta_srv::bootstrap: starting http server at 127.0.0.1:4000
2025-08-27T09:57:32.392645Z  INFO servers::http: HTTP server timeout is disabled
2025-08-27T09:57:59.805436Z  INFO cmd: GreptimeDB version: 
branch: 
commit: 83f566ad20484549b7f550b79c0c71f1875ba663
clean: true
version: 0.16.0
2025-08-27T09:57:59.805440Z  INFO cmd: command line arguments
2025-08-27T09:57:59.805442Z  INFO cmd: argument: ./greptime
2025-08-27T09:57:59.805443Z  INFO cmd: argument: metasrv
2025-08-27T09:57:59.805443Z  INFO cmd: argument: start
2025-08-27T09:57:59.805444Z  INFO cmd: argument: --config-file
2025-08-27T09:57:59.805445Z  INFO cmd: argument: examples/metasrv-etcd.toml
2025-08-27T09:57:59.806105Z  WARN cmd: Failed to activate heap profile err=0: Internal error
1: Memory profiling is not enabled
2025-08-27T09:57:59.806875Z  INFO cmd::metasrv: Metasrv start command: StartCommand {
    rpc_bind_addr: None,
    rpc_server_addr: None,
    store_addrs: None,
    config_file: Some(
        "examples/metasrv-etcd.toml",
    ),
    selector: None,
    use_memory_store: None,
    enable_region_failover: None,
    http_addr: None,
    http_timeout: None,
    env_prefix: "GREPTIMEDB_METASRV",
    data_home: None,
    store_key_prefix: "",
    max_txn_ops: None,
    backend: None,
}
2025-08-27T09:57:59.807559Z  INFO servers::grpc: Using detected: 10.152.100.81:3002 as server address
2025-08-27T09:57:59.809567Z  INFO cmd::metasrv: Metasrv options: MetasrvOptions {
    store_addrs: [
        "127.0.0.1:2379",
    ],
    backend_tls: None,
    selector: RoundRobin,
    use_memory_store: false,
    enable_region_failover: false,
    allow_region_failover_on_local_wal: false,
    grpc: GrpcOptions {
        bind_addr: "127.0.0.1:3002",
        server_addr: "10.152.100.81:3002",
        max_recv_message_size: 512.0MiB,
        max_send_message_size: 512.0MiB,
        flight_compression: ArrowIpc,
        runtime_size: 8,
        tls: TlsOption {
            mode: Disable,
            cert_path: "",
            key_path: "",
            ca_cert_path: "",
            watch: false,
        },
    },
    http: HttpOptions {
        addr: "127.0.0.1:4001",
        timeout: 0ns,
        disable_dashboard: true,
        body_limit: 64.0MiB,
        prom_validation_mode: Strict,
        cors_allowed_origins: [],
        enable_cors: true,
    },
    logging: LoggingOptions {
        dir: "./greptimedb_data/logs",
        level: None,
        log_format: Text,
        max_log_files: 720,
        append_stdout: true,
        enable_otlp_tracing: false,
        otlp_endpoint: None,
        tracing_sample_ratio: None,
        otlp_export_protocol: None,
    },
    procedure: ProcedureConfig {
        max_retry_times: 12,
        retry_delay: 500ms,
        max_metadata_value_size: Some(
            1.5MiB,
        ),
        max_running_procedures: 128,
    },
    failure_detector: PhiAccrualFailureDetectorOptions {
        threshold: 8.0,
        min_std_deviation: 100ms,
        acceptable_heartbeat_pause: 10s,
        first_heartbeat_estimate: 1s,
    },
    datanode: DatanodeClientOptions {
        client: ClientOptions {
            timeout: 10s,
            connect_timeout: 1s,
            tcp_nodelay: true,
        },
    },
    enable_telemetry: true,
    data_home: "./greptimedb_data",
    wal: RaftEngine,
    export_metrics: ExportMetricsOption {
        enable: false,
        write_interval: 30s,
        self_import: None,
        remote_write: None,
    },
    store_key_prefix: "",
    max_txn_ops: 128,
    flush_stats_factor: 3,
    tracing: TracingOptions,
    backend: EtcdStore,
    meta_table_name: "greptime_metakv",
    meta_election_lock_id: 1,
    node_max_idle_time: 86400s,
}
2025-08-27T09:57:59.815842Z  INFO common_meta::kv_backend::etcd: Connected to etcd
2025-08-27T09:57:59.818907Z  INFO meta_srv::bootstrap: Using selector from options, selector type: RoundRobin
2025-08-27T09:57:59.820384Z  INFO common_event_recorder::recorder: Creating event recorder with options: EventRecorderOptions { ttl: "30d" }
2025-08-27T09:57:59.820480Z  INFO common_event_recorder::recorder: Start the background processor in event recorder to handle the received events.
2025-08-27T09:57:59.822163Z  INFO common_procedure::store: The procedure state store path is: procedure/
2025-08-27T09:57:59.990863Z  INFO cmd: Starting app: greptime-metasrv
2025-08-27T09:57:59.991165Z  INFO meta_srv::bootstrap: starting http server at 127.0.0.1:4001
2025-08-27T09:57:59.991842Z  INFO servers::http: HTTP server timeout is disabled
2025-08-27T09:58:22.040698Z  INFO cmd: GreptimeDB version: 
branch: 
commit: 83f566ad20484549b7f550b79c0c71f1875ba663
clean: true
version: 0.16.0
2025-08-27T09:58:22.040703Z  INFO cmd: command line arguments
2025-08-27T09:58:22.040705Z  INFO cmd: argument: ./greptime
2025-08-27T09:58:22.040706Z  INFO cmd: argument: metasrv
2025-08-27T09:58:22.040707Z  INFO cmd: argument: start
2025-08-27T09:58:22.040708Z  INFO cmd: argument: --config-file
2025-08-27T09:58:22.040709Z  INFO cmd: argument: examples/metasrv-etcd.toml
2025-08-27T09:58:22.041570Z  WARN cmd: Failed to activate heap profile err=0: Internal error
1: Memory profiling is not enabled
2025-08-27T09:58:22.042314Z  INFO cmd::metasrv: Metasrv start command: StartCommand {
    rpc_bind_addr: None,
    rpc_server_addr: None,
    store_addrs: None,
    config_file: Some(
        "examples/metasrv-etcd.toml",
    ),
    selector: None,
    use_memory_store: None,
    enable_region_failover: None,
    http_addr: None,
    http_timeout: None,
    env_prefix: "GREPTIMEDB_METASRV",
    data_home: None,
    store_key_prefix: "",
    max_txn_ops: None,
    backend: None,
}
2025-08-27T09:58:22.042949Z  INFO servers::grpc: Using detected: 10.152.100.81:3002 as server address
2025-08-27T09:58:22.044845Z  INFO cmd::metasrv: Metasrv options: MetasrvOptions {
    store_addrs: [
        "127.0.0.1:2379",
    ],
    backend_tls: None,
    selector: RoundRobin,
    use_memory_store: false,
    enable_region_failover: false,
    allow_region_failover_on_local_wal: false,
    grpc: GrpcOptions {
        bind_addr: "127.0.0.1:3002",
        server_addr: "10.152.100.81:3002",
        max_recv_message_size: 512.0MiB,
        max_send_message_size: 512.0MiB,
        flight_compression: ArrowIpc,
        runtime_size: 8,
        tls: TlsOption {
            mode: Disable,
            cert_path: "",
            key_path: "",
            ca_cert_path: "",
            watch: false,
        },
    },
    http: HttpOptions {
        addr: "127.0.0.1:14001",
        timeout: 0ns,
        disable_dashboard: true,
        body_limit: 64.0MiB,
        prom_validation_mode: Strict,
        cors_allowed_origins: [],
        enable_cors: true,
    },
    logging: LoggingOptions {
        dir: "./greptimedb_data/logs",
        level: None,
        log_format: Text,
        max_log_files: 720,
        append_stdout: true,
        enable_otlp_tracing: false,
        otlp_endpoint: None,
        tracing_sample_ratio: None,
        otlp_export_protocol: None,
    },
    procedure: ProcedureConfig {
        max_retry_times: 12,
        retry_delay: 500ms,
        max_metadata_value_size: Some(
            1.5MiB,
        ),
        max_running_procedures: 128,
    },
    failure_detector: PhiAccrualFailureDetectorOptions {
        threshold: 8.0,
        min_std_deviation: 100ms,
        acceptable_heartbeat_pause: 10s,
        first_heartbeat_estimate: 1s,
    },
    datanode: DatanodeClientOptions {
        client: ClientOptions {
            timeout: 10s,
            connect_timeout: 1s,
            tcp_nodelay: true,
        },
    },
    enable_telemetry: true,
    data_home: "./greptimedb_data",
    wal: RaftEngine,
    export_metrics: ExportMetricsOption {
        enable: false,
        write_interval: 30s,
        self_import: None,
        remote_write: None,
    },
    store_key_prefix: "",
    max_txn_ops: 128,
    flush_stats_factor: 3,
    tracing: TracingOptions,
    backend: EtcdStore,
    meta_table_name: "greptime_metakv",
    meta_election_lock_id: 1,
    node_max_idle_time: 86400s,
}
2025-08-27T09:58:22.048395Z  INFO common_meta::kv_backend::etcd: Connected to etcd
2025-08-27T09:58:22.049706Z  INFO meta_srv::bootstrap: Using selector from options, selector type: RoundRobin
2025-08-27T09:58:22.051005Z  INFO common_event_recorder::recorder: Creating event recorder with options: EventRecorderOptions { ttl: "30d" }
2025-08-27T09:58:22.051324Z  INFO common_event_recorder::recorder: Start the background processor in event recorder to handle the received events.
2025-08-27T09:58:22.053330Z  INFO common_procedure::store: The procedure state store path is: procedure/
2025-08-27T09:58:22.229846Z  INFO cmd: Starting app: greptime-metasrv
2025-08-27T09:58:22.230189Z  INFO meta_srv::bootstrap: starting http server at 127.0.0.1:14001
2025-08-27T09:58:22.230855Z  INFO servers::http: HTTP server timeout is disabled
2025-08-27T09:58:22.232868Z  INFO servers::http: HTTP server is bound to 127.0.0.1:14001
2025-08-27T09:58:22.275598Z  INFO common_greptimedb_telemetry: Attention: GreptimeDB now collects anonymous usage data to help improve its roadmap and prioritize features.
2025-08-27T09:58:22.275601Z  INFO common_greptimedb_telemetry: To learn more about this anonymous program and how to deactivate it if you don't want to participate, please visit the following URL: 
2025-08-27T09:58:22.275603Z  INFO common_greptimedb_telemetry: https://docs.greptime.com/reference/telemetry
2025-08-27T09:58:22.275815Z  INFO meta_srv::metasrv: Metasrv started
2025-08-27T09:58:22.276895Z  INFO meta_srv::bootstrap: gRPC server is bound to: 127.0.0.1:3002
2025-08-27T09:58:22.279967Z  INFO meta_srv::election::etcd: Election grant ttl: 5, lease: 7587889082102427657
2025-08-27T09:58:22.288143Z  INFO meta_srv::election: [10.152.100.81:3002] is elected as leader: "__metasrv_election", lease: 7587889082102427657
2025-08-27T09:58:22.288409Z  INFO meta_srv::metasrv: Leader's cache has bean cleared on leader change: Elected(LeaderKey { name: __metasrv_election, key: __metasrv_election/694d98eaf5c7b009, rev: 6, lease: 7587889082102427657 })
2025-08-27T09:58:22.291085Z  INFO common_procedure::local: LocalManager is start.
2025-08-27T09:58:22.291123Z  INFO common_procedure::local: LocalManager start to recover
2025-08-27T09:58:22.291632Z  INFO common_procedure::local: LocalManager finish recovery, cost: 0ms
2025-08-27T09:58:22.292516Z  INFO common_meta::node_expiry_listener: On leader start, node expiry listener started with max idle time: 86400s
2025-08-27T09:59:45.810147Z  INFO cmd: GreptimeDB version: 
branch: 
commit: 83f566ad20484549b7f550b79c0c71f1875ba663
clean: true
version: 0.16.0
2025-08-27T09:59:45.810150Z  INFO cmd: command line arguments
2025-08-27T09:59:45.810152Z  INFO cmd: argument: ./greptime
2025-08-27T09:59:45.810153Z  INFO cmd: argument: datanode
2025-08-27T09:59:45.810154Z  INFO cmd: argument: start
2025-08-27T09:59:45.810155Z  INFO cmd: argument: --config-file
2025-08-27T09:59:45.810156Z  INFO cmd: argument: examples/datanode-file.toml
2025-08-27T09:59:45.810465Z  WARN cmd: Failed to activate heap profile err=0: Internal error
1: Memory profiling is not enabled
2025-08-27T09:59:45.810512Z  INFO servers::grpc: Using detected: 10.152.100.81:3001 as server address
2025-08-27T09:59:45.812121Z  INFO cmd::datanode::builder: Initialized Datanode instance with GreptimeOptions {
    runtime: RuntimeOptions {
        global_rt_size: 10,
        compact_rt_size: 5,
    },
    plugins: [],
    component: DatanodeOptions {
        node_id: Some(
            1,
        ),
        workload_types: [
            Hybrid,
        ],
        require_lease_before_startup: false,
        init_regions_in_background: false,
        init_regions_parallelism: 16,
        grpc: GrpcOptions {
            bind_addr: "127.0.0.1:3001",
            server_addr: "10.152.100.81:3001",
            max_recv_message_size: 512.0MiB,
            max_send_message_size: 512.0MiB,
            flight_compression: ArrowIpc,
            runtime_size: 8,
            tls: TlsOption {
                mode: Disable,
                cert_path: "",
                key_path: "",
                ca_cert_path: "",
                watch: false,
            },
        },
        heartbeat: HeartbeatOptions {
            interval: 3s,
            retry_interval: 3s,
        },
        http: HttpOptions {
            addr: "127.0.0.1:4000",
            timeout: 0ns,
            disable_dashboard: true,
            body_limit: 64.0MiB,
            prom_validation_mode: Strict,
            cors_allowed_origins: [],
            enable_cors: true,
        },
        meta_client: None,
        wal: RaftEngine(
            RaftEngineConfig {
                dir: None,
                file_size: 128.0MiB,
                purge_threshold: 1.0GiB,
                purge_interval: 60s,
                read_batch_size: 128,
                sync_write: false,
                enable_log_recycle: true,
                prefill_log_files: false,
                sync_period: None,
                recovery_parallelism: 10,
            },
        ),
        storage: StorageConfig {
            data_home: "./greptimedb_data",
            store: File(
                FileConfig,
            ),
            providers: [],
        },
        max_concurrent_queries: 0,
        region_engine: [
            Mito(
                MitoConfig {
                    num_workers: 5,
                    worker_channel_size: 128,
                    worker_request_batch_size: 64,
                    manifest_checkpoint_distance: 10,
                    compress_manifest: false,
                    max_background_flushes: 5,
                    max_background_compactions: 3,
                    max_background_purges: 10,
                    auto_flush_interval: 1800s,
                    global_write_buffer_size: 1.0GiB,
                    global_write_buffer_reject_size: 2.0GiB,
                    sst_meta_cache_size: 128.0MiB,
                    vector_cache_size: 512.0MiB,
                    page_cache_size: 2.0GiB,
                    selector_result_cache_size: 512.0MiB,
                    enable_write_cache: false,
                    write_cache_path: "",
                    write_cache_size: 5.0GiB,
                    write_cache_ttl: None,
                    sst_write_buffer_size: 8.0MiB,
                    parallel_scan_channel_size: 32,
                    max_concurrent_scan_files: 128,
                    allow_stale_entries: false,
                    index: IndexConfig {
                        aux_path: "",
                        staging_size: 2.0GiB,
                        staging_ttl: Some(
                            604800s,
                        ),
                        write_buffer_size: 8.0MiB,
                        metadata_cache_size: 64.0MiB,
                        content_cache_size: 128.0MiB,
                        content_cache_page_size: 64.0KiB,
                        result_cache_size: 128.0MiB,
                    },
                    inverted_index: InvertedIndexConfig {
                        create_on_flush: Auto,
                        create_on_compaction: Auto,
                        apply_on_query: Auto,
                        mem_threshold_on_create: Auto,
                        intermediate_path: "",
                        write_buffer_size: 8.0MiB,
                    },
                    fulltext_index: FulltextIndexConfig {
                        create_on_flush: Auto,
                        create_on_compaction: Auto,
                        apply_on_query: Auto,
                        mem_threshold_on_create: Auto,
                        compress: true,
                    },
                    bloom_filter_index: BloomFilterConfig {
                        create_on_flush: Auto,
                        create_on_compaction: Auto,
                        apply_on_query: Auto,
                        mem_threshold_on_create: Auto,
                    },
                    memtable: TimeSeries,
                    min_compaction_interval: 0ns,
                },
            ),
            File(
                EngineConfig,
            ),
        ],
        logging: LoggingOptions {
            dir: "./greptimedb_data/logs",
            level: None,
            log_format: Text,
            max_log_files: 720,
            append_stdout: true,
            enable_otlp_tracing: false,
            otlp_endpoint: None,
            tracing_sample_ratio: None,
            otlp_export_protocol: None,
        },
        enable_telemetry: true,
        export_metrics: ExportMetricsOption {
            enable: false,
            write_interval: 30s,
            self_import: None,
            remote_write: None,
        },
        tracing: TracingOptions,
        query: QueryOptions {
            parallelism: 0,
            allow_query_fallback: false,
        },
        memory: MemoryOptions {
            enable_heap_profiling: true,
        },
        rpc_addr: None,
        rpc_hostname: None,
        rpc_runtime_size: None,
        rpc_max_recv_message_size: None,
        rpc_max_send_message_size: None,
    },
}
